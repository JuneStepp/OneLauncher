from pathlib import Path
from textwrap import dedent
from typing import Final, Literal, TypeAlias

from PySide6 import QtCore, QtGui
from PySide6.QtWidgets import QApplication

from ..resources import data_dir

# Dynamic property used for styling, like the class attribute in HTML
CLASS_PROPERTY: str = "qssClass"
# Unit that is the application base font size multiplied by the Rem number when
# transformed into pixels.
Rem: TypeAlias = float
SPACING: Final[dict[str, Rem]] = {
    "0": 0.0,
    "0.5": 0.125,
    "1": 0.25,
    "1.5": 0.375,
    "2": 0.5,
    "2.5": 0.625,
    "3": 0.75,
    "3.5": 0.875,
    "4": 1.0,
    "5": 1.25,
    "6": 1.5,
    "7": 1.75,
    "8": 2.0,
    "9": 2.25,
    "10": 2.5,
    "11": 2.75,
    "12": 3.0,
    "14": 3.5,
    "16": 4.0,
    "20": 5.0,
    "24": 6.0,
    "28": 7.0,
    "32": 8.0,
    "36": 9.0,
    "40": 10.0,
    "44": 11.0,
    "48": 12.0,
    "52": 13.0,
    "56": 14.0,
    "60": 15.0,
    "64": 16.0,
    "72": 18.0,
    "80": 20.0,
    "96": 24.0,
}
TYPE_SCALE: Final[dict[str, Rem]] = {
    "xs": 0.75,
    "sm": 0.875,
    "base": 1.0,
    "lg": 1.125,
    "xl": 1.25,
    "2xl": 1.5,
    "3xl": 1.875,
    "4xl": 2.25,
    "5xl": 3.0,
    "6xl": 3.75,
    "7xl": 4.5,
    "8xl": 6.0,
    "9xl": 8.0,
}
Direction: TypeAlias = Literal["left", "right", "top", "bottom"]
DIRECTIONS_SHORTHAND: tuple[tuple[tuple[Direction, ...], str], ...] = (
    (("left",), "l"),
    (("right",), "r"),
    (("top",), "t"),
    (("bottom",), "b"),
    (("left", "right"), "x"),
    (("top", "bottom"), "y"),
)


class ApplicationStyle(QtCore.QObject):
    def __init__(self, qapp: QApplication) -> None:
        super().__init__()
        self.qapp = qapp
        self.update_app_stylesheet()
        qapp.fontChanged.connect(self.update_base_font)
        qapp.styleHints().colorSchemeChanged.connect(self.update_app_stylesheet)

    def update_app_stylesheet(self) -> None:
        self.qapp.setStyleSheet(self.generate_stylesheet())

    def generate_stylesheet(self, qtdesigner_version: bool = False) -> str:
        self._font_base = self.qapp.font()
        self._base_font_metrics = QtGui.QFontMetricsF(self._font_base)
        stylesheet = "/* AUTOGENERATED. DO NOT EDIT. */"
        # Set defaults
        stylesheet += dedent(f"""
            * {{
                font-size: {self._font_base.pointSizeF()}pt;
                icon-size: {self.rem_to_px(TYPE_SCALE['base'])}px;
            }}
            """)
        if qtdesigner_version:
            # Set placeholder banner for better style preview in QtDesigner
            stylesheet += dedent(f"""
                QLabel#imgGameBanner {{
                    qproperty-pixmap: url({((data_dir / Path('images/LOTRO_banner.png')).as_posix())})
                }}
            """)
        stylesheet += self._get_font_size_qss()
        stylesheet += self._get_icon_size_qss(qtdesigner_version=qtdesigner_version)
        stylesheet += self._get_spacing_qss("margin", "m")
        stylesheet += self._get_spacing_qss("padding", "p")
        return stylesheet

    def _get_font_size_qss(self) -> str:
        stylesheet = ""
        for scale_prefix, rem in TYPE_SCALE.items():
            stylesheet += dedent(f"""
                *[{CLASS_PROPERTY}~="text-{scale_prefix}"] {{
                    font-size: {self._font_base.pointSizeF() * rem}pt;
                }}
                """)
        return stylesheet

    def _get_icon_size_qss(self, qtdesigner_version: bool = False) -> str:
        stylesheet = ""
        for scale_prefix, rem in TYPE_SCALE.items():
            stylesheet += dedent(f"""
                *[{CLASS_PROPERTY}~="icon-{scale_prefix}"] {{
                    qproperty-iconSize: {self.rem_to_px(rem)}px;
                    {f"qproperty-icon: url({ (data_dir / Path('images/placeholder_icon.svg')).as_posix()});" if qtdesigner_version else ""}
                }}""")
        return stylesheet

    def _get_spacing_qss(self, property_name: str, property_shorthand: str) -> str:
        stylesheet = ""
        for spacing_name, spacing_rem in SPACING.items():
            spacing_px = self.rem_to_px(spacing_rem)
            stylesheet += dedent(f"""
                *[{CLASS_PROPERTY}~="{property_shorthand}-{spacing_name}"] {{
                    {property_name}: {spacing_px}px;
                }}""")
            for directions, directions_shorthand in DIRECTIONS_SHORTHAND:
                stylesheet += dedent(f"""
                    *[{CLASS_PROPERTY}~="{property_shorthand}{directions_shorthand}-{spacing_name}"] {{
                """)
                for direction in directions:
                    stylesheet += f"    {property_name}-{direction}: {spacing_px}px;\n"
                stylesheet += "}"
        return stylesheet

    def rem_to_px(self, rem: Rem) -> int:
        return round(self._base_font_metrics.height() * rem)

    def update_base_font(self) -> None:
        if self.qapp.font() != self._font_base:
            self.update_app_stylesheet()
